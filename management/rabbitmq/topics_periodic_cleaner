#!/usr/bin/env ruby

BIN_DIR = File.dirname(File.symlink?(__FILE__) ? File.readlink(__FILE__) : __FILE__)
TOP_DIR = File.join(BIN_DIR, '..')
$: << File.join(TOP_DIR, 'lib')

DESCR = %{
Remove a topic/queue or a set of topics/queues from RabbitMQ Broker.

}

# The following is to work around a bug in activesupport triggered by
# the JWT library which is used only in the AMQP transport, os it
# fails quietly if that library is not installed in XMPP deployments
begin; require 'json/jwt'; rescue Exception; end


require 'optparse'
require 'omf_common'
require 'highline/import'
require 'net/http'
require 'cgi'

OP_MODE = :development

opts = {
    communication: {
        #url: 'xmpp://srv.mytestbed.net',
        #auth: {}
    },
    eventloop: { type: :em},
    logging: {
        level: 'info'
    }
}

@user = nil
@password = nil
config = nil

op = OptionParser.new
op.banner = "Usage: #{op.program_name} [options] topic1 topic2 ...\n#{DESCR}\n"
op.on '-f', '--file FILE NAME', "Configuration file" do |f|
  config = YAML.load_file(f)
end

op.on '-u', '--user USERNAME', "Username of rabbitmq" do |u|
  @user = u
end

op.on '-p', '--password PASSWORD', "Password to rabbitmq user given in -u" do |p|
  @password = p
end

op.on_tail('-h', "--help", "Show this message") { $stderr.puts op; exit }
op.parse(ARGV)

unless config and @user and @password
  $stderr.puts "ERROR: Missing declaration of --file\n\n"
  $stderr.puts op
  exit(-1)
end

def get_request(url)
  puts "GET #{url}\n"

  uri = URI.parse(url)
  http = Net::HTTP.new(address=uri.host, port=uri.port)

  request = Net::HTTP::Get.new(uri.request_uri, initheader = {'Content-Type' =>'application/json'})
  request.basic_auth @user, @password

  response = http.request(request)

  body = JSON.parse(response.body)
  body
end

def put_request(url, res_desc)
  puts "PUT all topics\n"

  uri = URI.parse(url)
  http = Net::HTTP.new(address=uri.host, port=uri.port)

  request = Net::HTTP::Put.new(uri.request_uri, initheader = {'Content-Type' =>'application/json'})
  request.basic_auth @user, @password
  request.body = res_desc.to_json

  response = http.request(request)

  body = JSON.parse(response.body)
  puts body
  body
end

def filter_topics_with_pattern(topics, pattern, scape=false)
  if pattern == "*"
    topics
  else
    regex = nil
    unless scape
      regex = /#{pattern}/
    else
      regex = Regexp.new(Regexp.quote(pattern))
    end
    topics.select { |topic| topic["name"] =~ regex }
  end
end

def delete_request(url)
  puts "DELETE #{url}\n"

  uri = URI.parse(url)
  http = Net::HTTP.new(uri.host, uri.port)

  request = Net::HTTP::Delete.new(uri.request_uri, initheader = {'Content-Type' =>'application/json'})
  request.basic_auth @user, @password

  response = http.request(request)

  JSON.parse(response.body) if response.body
end

def extract_topics_names(topics)
  topics.map {|topic| topic["name"]}
end

def delete_topic(base_url, topic)
  puts "Deleting topic #{topic['name']}"
  encoded_name = CGI::escape(topic['name'])
  delete_url = "#{base_url}/api/exchanges/%2f/#{encoded_name}"
  delete_request(delete_url)
end

def clean_zombies_from_center(authority_url, base_url, domain)
  url = "#{authority_url}/api/exchanges"
  central_topics = get_request(url)

  federated_central_topics = filter_topics_with_pattern(central_topics, "federation: .*fed-#{domain}.*")
  local_central_topics = filter_topics_with_pattern(central_topics, "^fed-#{domain}.*")

  url = "#{base_url}/api/exchanges"
  sub_topics = get_request(url)
  local_sub_topics = filter_topics_with_pattern(sub_topics, "^fed-#{domain}.*")
  local_sub_topics_names = extract_topics_names(local_sub_topics)
  federated_sub_topics = filter_topics_with_pattern(sub_topics, "federation: .*fed-#{domain}.*")

  topics_to_delete = []
  for central_topic in federated_central_topics
    topic_name = central_topic['name'].split(' ')[1].strip()
    unless local_sub_topics_names.include? topic_name
      topics_to_delete << topic_name
    end
  end

  for topic_name in topics_to_delete
    federated_central = filter_topics_with_pattern(federated_central_topics, topic_name, transform=true)
    for topic in federated_central
      delete_topic(authority_url, topic)
    end
    local_central = filter_topics_with_pattern(local_central_topics, topic_name,transform=true)
    for topic in local_central
      delete_topic(authority_url, topic)
    end
    federated_sub = filter_topics_with_pattern(federated_sub_topics, topic_name,transform=true)
    for topic in federated_sub
      delete_topic(base_url, topic)
    end
  end
end

def clean_zombies_from_sub(authority_url, base_url, domain)
  url = "#{authority_url}/api/exchanges"
  central_topics = get_request(url)

  federated_central_topics = filter_topics_with_pattern(central_topics, "federation: .*fed-#{domain}.*")
  local_central_topics = filter_topics_with_pattern(central_topics, "^fed-#{domain}.*")

  url = "#{base_url}/api/exchanges"
  sub_topics = get_request(url)
  local_sub_topics = filter_topics_with_pattern(sub_topics, "^fed-#{domain}.*")
  federated_sub_topics = filter_topics_with_pattern(sub_topics, "federation: .*fed-#{domain}.*")

  topics_to_delete = []
  for local_sub_topic in local_sub_topics
    topic_name = local_sub_topic['name']
    federated_sub_topics = filter_topics_with_pattern(federated_sub_topics, topic_name,scape=true)
    if federated_sub_topics.empty?
      topics_to_delete << topic_name
    end
    federated_sub_topics = filter_topics_with_pattern(federated_central_topics, topic_name,scape=true)
    if federated_sub_topics.empty?
      topics_to_delete << topic_name
    end
  end

  for topic_name in topics_to_delete
    federated_central = filter_topics_with_pattern(federated_central_topics, topic_name,scape=true)
    for topic in federated_central
      delete_topic(authority_url, topic)
    end
    local_central = filter_topics_with_pattern(local_central_topics, topic_name,scape=true)
    for topic in local_central
      delete_topic(authority_url, topic)
    end
    federated_sub = filter_topics_with_pattern(federated_sub_topics, topic_name,scape=true)
    for topic in federated_sub
      delete_topic(base_url, topic)
    end
    local_sub = filter_topics_with_pattern(local_sub_topics, topic_name,scape=true)
    for topic in local_sub
      delete_topic(base_url, topic)
    end
  end

end

def clean_zombie_topics(config)
  puts "Cleaning zombie topics: #{config}"
  authority = config[:authority]
  subauthorities = config[:subauthorities]

  authority_domain = authority[:domain]
  authority_url = authority[:http_url]

  for subauthority in subauthorities
    domain = subauthority[:domain]
    base_url = subauthority[:http_url]

    clean_zombies_from_center(authority_url, base_url, domain)
    clean_zombies_from_center(base_url, authority_url, domain)
  end

  for subauthority in subauthorities
    base_url = subauthority[:http_url]

    clean_zombies_from_sub(authority_url, base_url, authority_domain)
    clean_zombies_from_sub(base_url, authority_url, authority_domain)
  end

end

clean_zombie_topics(config)
