#!/usr/bin/env ruby

BIN_DIR = File.dirname(File.symlink?(__FILE__) ? File.readlink(__FILE__) : __FILE__)
TOP_DIR = File.join(BIN_DIR, '..')
$: << File.join(TOP_DIR, 'lib')

DESCR = %{
Remove a topic/queue or a set of topics/queues from RabbitMQ Broker.

}

# The following is to work around a bug in activesupport triggered by
# the JWT library which is used only in the AMQP transport, os it
# fails quietly if that library is not installed in XMPP deployments
begin; require 'json/jwt'; rescue Exception; end


require 'optparse'
require 'omf_common'
require 'highline/import'
require 'net/http'
require 'cgi'

OP_MODE = :development

opts = {
    communication: {
        #url: 'xmpp://srv.mytestbed.net',
        #auth: {}
    },
    eventloop: { type: :em},
    logging: {
        level: 'info'
    }
}

@user = nil
@password = nil
config_filename = nil

op = OptionParser.new
op.banner = "Usage: #{op.program_name} [options] topic1 topic2 ...\n#{DESCR}\n"
op.on '-c', '--config FILE', "Configuration file" do |f|
  config_filename = f
end

op.on '-u', '--user USERNAME', "Username of rabbitmq" do |u|
  @user = u
end

op.on '-p', '--password PASSWORD', "Password to rabbitmq user given in -u" do |p|
  @password = p
end

op.on_tail('-h', "--help", "Show this message") { $stderr.puts op; exit }
op.parse(ARGV)

unless config_filename and @user and @password
  $stderr.puts "ERROR: Missing declaration of --file\n\n"
  $stderr.puts op
  exit(-1)
end

def get_request(url)
  puts "GET #{url}\n"

  uri = URI.parse(url)
  http = Net::HTTP.new(address=uri.host, port=uri.port)

  request = Net::HTTP::Get.new(uri.request_uri, initheader = {'Content-Type' =>'application/json'})
  request.basic_auth @user, @password

  response = http.request(request)

  body = JSON.parse(response.body)
  body
end

def put_request(url, res_desc)
  puts "PUT all topics\n"

  uri = URI.parse(url)
  http = Net::HTTP.new(address=uri.host, port=uri.port)

  request = Net::HTTP::Put.new(uri.request_uri, initheader = {'Content-Type' =>'application/json'})
  request.basic_auth @user, @password
  request.body = res_desc.to_json

  response = http.request(request)

  body = JSON.parse(response.body)
  puts body
  body
end

def filter_topics_with_pattern(topics, pattern, scape=false)
  if pattern == "*"
    topics
  else
    regex = nil
    unless scape
      regex = /#{pattern}/
    else
      regex = Regexp.new(Regexp.quote(pattern))
    end
    topics.select { |topic| topic["name"] =~ regex }
  end
end

def delete_request(url)
  puts "DELETE #{url}\n"

  uri = URI.parse(url)
  http = Net::HTTP.new(uri.host, uri.port)

  request = Net::HTTP::Delete.new(uri.request_uri, initheader = {'Content-Type' =>'application/json'})
  request.basic_auth @user, @password

  response = http.request(request)

  JSON.parse(response.body) if response.body
end

def extract_topics_names(topics)
  topics.map {|topic| topic["name"]}
end

def delete_topic(base_url, topic)
  puts "Deleting topic #{topic['name']}"
  encoded_name = CGI::escape(topic['name'])
  delete_url = "#{base_url}/api/exchanges/%2f/#{encoded_name}"
  delete_request(delete_url)
end

def find_related_locals(rc_topic, local_topics)
  local_topics.select { |topic| topic["name"] =~ /.*#{rc_topic}.*/ }
end

def clean_orphan_from_sub(http_url, amqp_url, domain, config_filename)
  url = "#{http_url}/api/exchanges"
  sub_topics = get_request(url)

  rc_topics = filter_topics_with_pattern(sub_topics, "(^fed-#{domain}.*|^am_controller)")
  local_topics = filter_topics_with_pattern(sub_topics, "(^local_.*)")

  for topic in rc_topics
    topic_url = "#{amqp_url}/#{topic['name']}"
    puts topic_url
    output = `omf_send_request -c #{config_filename} -r #{topic_url} uid`
    num_lines = output.split("\n").size
    if num_lines <= 1
      delete_topic(http_url, topic)
      related_topics = find_related_locals(topic['name'], local_topics)
      for related_topic in related_topics
        delete_topic(http_url, related_topic)
      end
    end
  end

end

def clean_orphan_topics(config_filename)
  config = YAML.load_file(config_filename)

  puts "Cleaning orphan topics: #{config}"
  rest_conf = config[:rest]
  amqp_conf = config[:amqp]


  domain = config[:domain].gsub(".", "-")
  base_http_url = rest_conf[:url]
  base_amqp_url = amqp_conf[:url]

  clean_orphan_from_sub(base_http_url, base_amqp_url, domain, config_filename)


end

clean_orphan_topics(config_filename)
